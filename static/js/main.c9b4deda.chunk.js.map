{"version":3,"sources":["Components/MapEvent.js","Components/Documentation.js","App.js","serviceWorker.js","index.js"],"names":["EventsExample","state","hasLocation","weather","zoom","latlng","lat","lng","mapRef","createRef","handleClick","e","setState","axios","get","then","res","data","marker","this","Marker","position","Tooltip","permanent","name","sys","country","main","temp","feels_like","wind","speed","Map","center","length","onClick","onLocationfound","handleLocationFound","ref","TileLayer","attribution","url","Component","Documentation","className","target","rel","href","React","App","basename","to","id","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9b4deda.chunk.js","sourcesContent":["// Demo page. Here OpenStreetMap is used which will give latitude and longitude of the location by user click\n// It will display weather of that place which will be fetched from openweathermap api.\n\nimport React, { createRef, Component } from \"react\";\nimport { Map, TileLayer, Marker, Tooltip } from \"react-leaflet\";\nimport axios from \"axios\";\n\nexport default class EventsExample extends Component {\n  // state of the component which will store weather, latitude and logitude information\n  state = {\n    hasLocation: false,\n    weather: null,\n    zoom: 10,\n    latlng: {\n      lat: 42.301063,\n      lng: -83.020527,\n    },\n  };\n\n  mapRef = createRef();\n\n  handleClick = (e) => {\n    this.setState({\n      hasLocation: true,\n      latlng: e.latlng,\n    });\n    // Fetch weather information from openweathermap API.\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n          e.latlng.lat +\n          \"&lon=\" +\n          e.latlng.lng +\n          \"&appid=0742b2f15e28ac07bd5c21cc892a584d&units=Metric\"\n      )\n      .then((res) => {\n        this.setState({\n          weather: res.data,\n        });\n      });\n  };\n\n  // Display map from OpenStreetMap.org api by using LeafLet JavaScript library\n  render() {\n    const marker = this.state.hasLocation ? (\n      <Marker position={this.state.latlng}>\n        <Tooltip permanent>\n          It's{\" \"}\n          <b>\n            {this.state.weather\n              ? this.state.weather.name + \", \" + this.state.weather.sys.country\n              : \"\"}\n          </b>{\" \"}\n          <br></br> <b>Weather:</b>{\" \"}\n          {this.state.weather ? this.state.weather.weather[0].main : \"\"}\n          <br></br> <b>Temperature:</b>{\" \"}\n          {this.state.weather ? this.state.weather.main.temp + \" Celsius\" : \"\"}\n          <br></br> <b>Temperature feels like:</b>{\" \"}\n          {this.state.weather\n            ? this.state.weather.main.feels_like + \" Celsius\"\n            : \"\"}\n          <br></br> <b>Wind speed:</b>{\" \"}\n          {this.state.weather\n            ? this.state.weather.wind.speed + \" meter/sec\"\n            : \"\"}\n          <br></br>\n          <b>Latitude</b> {this.state.latlng.lat},<br></br> <b>Longitude</b>{\" \"}\n          {this.state.latlng.lng}\n        </Tooltip>\n      </Marker>\n    ) : null;\n\n    return (\n      <Map\n        center={this.state.latlng}\n        length={4}\n        onClick={this.handleClick}\n        onLocationfound={this.handleLocationFound}\n        ref={this.mapRef}\n        zoom={13}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {marker}\n      </Map>\n    );\n  }\n}\n","// User documentation component where user can find information about how to use this product\n\nimport React from \"react\";\n\nexport default class Documentation extends React.Component {\n  render() {\n    return (\n      <div className=\"container pt-2\">\n        <div className=\"row pt-5\">\n          <div className=\"col\"></div>\n          <div className=\"card col-8\">\n            <div className=\"card-body\">\n              <h4>Introduction</h4>\n              <p className=\"text-left\">\n                MyWeather lets you know the weather of any location across the\n                globe. It not only tells you the current weather (cloudy, humid,\n                rain, etc.) and temperature, but also gives you the information\n                about what the temperature feels like, what the windspeed is,\n                the region you are looking at and its latitude and longitude.\n                All it needs to fetch this information for you is a click on the\n                map.\n                <br />\n                <br />\n              </p>\n              <h4>About the APIs</h4>\n              <p className=\"text-left\">\n                {\" \"}\n                Application Programming Interface (API), allows the applications\n                to communicate with each other. It is a kind of intermediate\n                software. It allows the third party to use the functionality of\n                a software application. Below are the 2 APIs we have used for\n                this project:\n                <br />\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://www.openstreetmap.org/#map=3/71.34/-96.82\"\n                >\n                  https://www.openstreetmap.org/#map=3/71.34/-96.82\n                </a>\n                <br />\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://openweathermap.org/api\"\n                >\n                  https://openweathermap.org/api\n                </a>{\" \"}\n                <br />\n                Using the map API, we fetch the latitude and longitude from the\n                userâ€™s click action. The latitude-longitude pair is then used to\n                fetch the weather information using the weather API and that is\n                displayed as a tooltip.\n              </p>\n              <br />\n            </div>\n          </div>\n          <div className=\"col\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport MapEvent from \"./Components/MapEvent\";\nimport Documentation from \"./Components/Documentation\";\n\nfunction App() {\n  return (\n    <Router basename={\"/myweather\"}>\n      <div className=\"App\">\n        {/* Navbar with link of landing page, demo site and documentation */}\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <Link className=\"navbar-brand\" to=\"/\">\n            MyWeather\n          </Link>\n          <div className=\"\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/doc\">\n                  Documentation\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        {/* Routes of demo and documentation */}\n        <Switch>\n          <Route exact path=\"/\">\n            <MapEvent />\n          </Route>\n          <Route path=\"/doc\">\n            <Documentation />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}